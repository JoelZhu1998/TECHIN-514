#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>

#include "addons/TokenHelper.h"
//Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

const char* ssid = "UW MPSK";
const char* password = "M5>E7=v-]L"; // Replace with your network password
#define DATABASE_URL "https://lab5-311ae-default-rtdb.firebaseio.com/" // Replace with your database URL
#define API_KEY "AIzaSyB0WRLGn33Hehwsc93mz50dsAAQXtsu9W4" // Replace with your API key
#define STAGE_INTERVAL 30000 // Increase to 30 seconds for initial idle
#define DEEP_SLEEP_DURATION 60000 // Increase deep sleep to 10 minutes (600 seconds), in microseconds
#define SENSOR_READ_INTERVAL 5000 // Increase to 5 seconds between sensor readings
#define MAX_WIFI_RETRIES 5 // Maximum number of WiFi connection retries
int uploadInterval = 10000; // Increase to 10 seconds between uploads

//Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;

// HC-SR04 Pins
const int trigPin = 2;
const int echoPin = 3;

// Define sound speed in cm/usec
const float soundSpeed = 0.034;

float measureDistance();
void connectToWiFi();
void initFirebase();
void sendDataToFirebase(float distance);

void setup() {
  Serial.begin(115200);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  connectToWiFi();
  initFirebase();

  // Only measure and send data once per cycle, then go to deep sleep
  float distance = measureDistance();
  sendDataToFirebase(distance);

  Serial.println("Going to deep sleep...");
  WiFi.disconnect(true);
  esp_sleep_enable_timer_wakeup(DEEP_SLEEP_DURATION); // Set deep sleep duration
  esp_deep_sleep_start();
}

void loop() {
  // Not used
}

float measureDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  float distance = duration * soundSpeed / 2;

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  delay(SENSOR_READ_INTERVAL); // Increase delay between measurements
  return distance;
}

void connectToWiFi() {
  Serial.println(WiFi.macAddress());
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");
  int wifiCnt = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); // Reduced delay to speed up connection attempt
    Serial.print(".");
    wifiCnt++;
    if (wifiCnt > MAX_WIFI_RETRIES) {
      Serial.println("WiFi connection failed, going to deep sleep");
      esp_sleep_enable_timer_wakeup(DEEP_SLEEP_DURATION*1000);
      esp_deep_sleep_start();
    }
  }
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void initFirebase() {
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase connected");
    signupOK = true;
  } else {
    Serial.printf("Firebase signup failed: %s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback; 
  Firebase.begin(&config, &auth);
  Firebase.reconnectNetwork(true);
}

void sendDataToFirebase(float distance) {
  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > uploadInterval || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.pushFloat(&fbdo, "test/distance", distance)) {
      Serial.println("Data sent to Firebase");
    } else {
      Serial.println("Failed to send data");
      Serial.println(fbdo.errorReason());
    }
  }
}
